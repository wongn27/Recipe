@page "/Ingredient"
@inject IHttpClientFactory _clientFactory

<h3>Ingredient Data</h3>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div> class="h2">@errorString</div>
}
else if (ingredient is null)
{
    <div class="h4">Loading...</div>
}
else
{
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Id</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            
            {
                <tr>
                    <td></td>
                </tr>
            }

        </tbody>
    </table>
}

@code {      
    IngredientModel ingredient;
  //  Ingredient ingredient;
    string errorString;


    protected override async Task OnInitializedAsync()
    {

        
        var request = new HttpRequestMessage(HttpMethod.Get,
      "https://api.spoonacular.com/food/ingredients/9266/information?amount=1&apiKey=d36cb53813e341069b3c81d6d3b61c31");


        //ClientFactory will make sure clients are closed and not overdrive sockets
        var client = _clientFactory.CreateClient();

        HttpResponseMessage response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            errorString = null;
            ingredient = await response.Content.ReadFromJsonAsync<IngredientModel>();
            errorString = null;
        }
        else
        {
            errorString = $"There was an error getting data: {response.ReasonPhrase}";
        }
            
    }
}
    