@page "/login"
@using Recipe.Web.Data
@using Recipe.Web.Data.Models
@using  Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@inject AuthenticationStateProvider authenticationStateProvider
@inject HttpClient httpClient
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
<!--This lets the page navigate to a different page on the button click -AL-->
@inject NavigationManager navigationManager

<h3>Login</h3>
<br />
<br />
<EditForm Model="@user" OnValidSubmit="@LoginUser">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="col-12 row">
        <label class="col-2 font-weight-bold">Email:</label>
        <InputText class="form-control col-3" @bind-Value="user.Email" placeholder="Email" />
        &nbsp;<ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="col-12 row">
        <label class="col-2 font-weight-bold">Password:</label>
        <InputText class="form-control col-3" type="password" @bind-Value="user.Password" placeholder="Password" />
        &nbsp;<ValidationMessage For="@(() => user.Password)" />
    </div>
    <br />
    <div class="col-12 row">
        <span class="col-2"></span>
        <input type="submit" class="form-control col-1 btn btn-primary" value="Login" />

    </div>
    <div class="col-12 row">
    <span class="col-2"></span>
        <input type="submit" class="form-control col-3 btn btn-primary" @onclick="ForgotClick" value="Forgot Username/Password" />
        @*<button type="button" @onclick="ValidateUser">Log In</button>*@
        @*<button type="button" @onclick="forgotClick">Forgot Username/Password</button>*@
    </div>
</EditForm>

@code {
private AuthenticateModel user;

protected override async Task OnInitializedAsync()
{
    user = new AuthenticateModel();

    //var json = JsonSerializer.Serialize<User>(user);
    await sessionStorage.SetItemAsync("email", user.Email);
    var email = await sessionStorage.GetItemAsync<string>("email");
}

private async Task LoginUser()
{
    // Assume that user is valid
    // Check with database
    // Call some action that validates the user

    using var response = await httpClient.PostAsJsonAsync<AuthenticateModel>("/login", user);

    if (response.IsSuccessStatusCode)
    {
        ((CustomAuthenticationStateProvider)authenticationStateProvider).MarkUserAsAuthenticated(user.Email);

        //Adding email to session storage so it can be used across all pages - RT
        await sessionStorage.SetItemAsync<string>("email", user.Email);        
       
        navigationManager.NavigateTo("/");
    }

}

//forgot account information button event -AL
private void ForgotClick()
{
    navigationManager.NavigateTo("/forgot");

}
}
