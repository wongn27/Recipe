@page "/recipefromprofile"
@using Recipe.Web.Data.Models
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager navigationManager


<h3>Your Recipe Results</h3>
@if (foundRecipes == null)
{
    <p>LOADING . .  .</p>
}
else
{
    <div class="card-deck">

        @foreach (var recipe in foundRecipes)
        {
            <div class="card m-3" style="min-width: 18rem; max-width:30.5%;">
                <div class="card-header">
                    <h3>@recipe.title</h3>
                </div>
                <img class="card-img-top" src="@recipe.image" />
                <l style="color:red">Missing Ingredients: @recipe.missedIngredients.Length  <a style="color:mediumseagreen"> Used Ingredients: @recipe.usedIngredientCount</a></l>

                @for (int i = 0; i < recipe.missedIngredientCount; i++)
                {
                    <l style="color:red"> @recipe.missedIngredients[i].name</l>
                }
                @for (int k = 0; k < recipe.usedIngredientCount; k++)
                {
                    <l style="color:mediumseagreen"> @recipe.usedIngredients[k].name</l>
                }
                <div class="card-footer text-center">
                    <button type="button" @onclick="@(() => selectedRecipeToView(recipe))" class="btn btn-primary m-1">View Recipe</button>
                    @*@if (displaySummarizationButtonPressed == true)
                        {
                            <p> @summarizeRecipe.summary.ToString()</p>
                        }*@
                </div>
            </div>
        }
    </div>
}

@code {

    public string userIngredientToSearchBy { get; set; }
    public string currentUserEmail { get; set; }
    User currentUser { get; set; }
    //Starting URL for the Recipe Search - RT
    string apiRecipeSearchStart = "https://api.spoonacular.com/recipes/findByIngredients?ingredients=";
    //Number of recipes returned
    string numOfRecipesSearchedFor = "&number=20";
    //The starting URL for the images - RT
    string imageSourceRecipe = "https://spoonacular.com/recipeImages/";

    RecipeModel[] foundRecipes;


    protected override async Task OnInitializedAsync()
    {
        //Getting email of current User - RT
        currentUserEmail = await sessionStorage.GetItemAsync<string>("email");

        //Getting Current user instance. This is where Guid is also gained - RT
        currentUser = await Http.GetFromJsonAsync<User>("api/userController/" + currentUserEmail.ToString());

        //Getting ingredients user searched for -RT
        userIngredientToSearchBy = await sessionStorage.GetItemAsync<string>("ingredientList");

        //Calling the API here, and storing the Recipes in a list - RT
        foundRecipes = await Http.GetFromJsonAsync<RecipeModel[]>
        (apiRecipeSearchStart + userIngredientToSearchBy + numOfRecipesSearchedFor + "&ranking=1" + "&ignorePantry=true" + "&metaInformation=true&apiKey=d36cb53813e341069b3c81d6d3b61c31");

        //Correcting image source URL. ALSO, getting count of missing ingredients for upcoming array - RT
        int missingIngCount = 0;
        foreach (var recipe in foundRecipes)
        {
            //Correcting Img source - RT
            recipe.image = imageSourceRecipe + recipe.id.ToString() + "-" + "240x150." + recipe.imageType.ToString();

            //Getting missing ingredient count - RT
            missingIngCount += recipe.missedIngredientCount;
        }
    }

    //Passing the selceted recipe to the recipe page.
    //Also sending the missing ingredients across pages -RT
    public async Task selectedRecipeToView(RecipeModel recipe)
    {
        int recipeId = recipe.id;
        string recipeName = recipe.title;
        string missingIngs = "";
        string missingIngUnits = "";
        string missingIngAmount = "";
        int ingredientCount = 0;

        //Saving missing ingredients to long string - RT
        foreach (var ings in recipe.missedIngredients)
        {
            missingIngs += (ings.name);
            missingIngUnits += (ings.unit.ToString());
            missingIngAmount += (ings.amount.ToString());
            ingredientCount++;
            if (ingredientCount != recipe.missedIngredientCount)
            {
                missingIngs += ",";
                missingIngUnits += ",";
                missingIngAmount += ",";
            }
        }

        string usedIngredients = "";
        string usedIngUnits = "";
        string usedIngAmount = "";
        ingredientCount = 0;

        foreach(var ings in recipe.usedIngredients)
        {
            usedIngredients += (ings.name);
            usedIngUnits += (ings.unit.ToString());
            usedIngAmount += (ings.amount.ToString());
            ingredientCount++;

            if (ingredientCount != recipe.usedIngredientCount)
            {
                usedIngredients += ",";
                usedIngUnits += ",";
                usedIngAmount += ",";
            }
        }

        //Saving long string to sessionStorage and pulling on recipe page - RT
        await sessionStorage.SetItemAsync<string>("missingIngredientString", missingIngs);
        await sessionStorage.SetItemAsync<string>("missingIngredientUnitString", missingIngUnits);
        await sessionStorage.SetItemAsync<string>("missingIngredientAmountString", missingIngAmount);
        await sessionStorage.SetItemAsync<string>("usedIngredients", usedIngredients);
        await sessionStorage.SetItemAsync<string>("usedIngredientUnitString", usedIngUnits);
        await sessionStorage.SetItemAsync<string>("usedIngredientAmountString", usedIngAmount);
        navigationManager.NavigateTo("/recipepage/" + recipeId.ToString() + "/" + recipeName);

    }
}