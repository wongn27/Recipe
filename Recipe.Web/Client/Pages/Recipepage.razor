@page "/recipepage/{id:int}/{title}"
@page "/recipepage"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Recipe.Web.Data.Models


@if (recipeDetails == null)
{
    <!--Pancake flip loading screen for a little *RAZZLE DAZZLE* NOTE: Need this "if null" check or info won't render async task- RT -->
    <img src="/images/Making-pancake-loader.gif" width="300" height="300" />

}

else
{
    <h3>@title</h3> <p>Date Added: TBD</p>
    <p>Cooking Time: @recipeDetails[0].readyInMinutes</p>
    <img src="@recipeDetails[0].image" />
    <p>@((MarkupString)recipeDetails[0].summary)</p>


    for (int i = 0; i < recipeDetails[0].extendedIngredients.Length; i++)
    {
        <li>@recipeDetails[0].extendedIngredients[i].originalString</li>
    }

    <br />

    for (int i = 0; i < recipeDetails[0].analyzedInstructions.Length; i++)
    {
        <ol>@recipeDetails[0].analyzedInstructions[i].name</ol>

        for (int s = 0; s < recipeDetails[0].analyzedInstructions[i].steps.Length; s++)
        {
            <ol>@recipeDetails[0].analyzedInstructions[i].steps[s].step</ol>
        }
    }

    <body>


        <!--Picture and Description section (default picture and description) -AL-->
        @*<img src="@recipe.image" /> <p></p>*@
        <br />
        <!--This section displays the Ingredients and the Steps in tables -AL-->
        <!--Setup will change in the future -AL-->
        <div style="display: table" width="100%" margin: 0 auto>
            <div style="display: table-row">
                <div style="display: table-cell">
                    <ul class="ingredientList" float:left>
                        @*<li>@recipeDetails[0].extendedIngredients[0].amount</li>
                            <li>@recipeDetails[0].extendedIngredients[0].name</li>
                            <li>Ingredient 3</li>*@
                    </ul>
                </div>
                <div style="display: table-cell">
                    <ol class="steps" float:right>
                        @*<li>Step 1: Do this</li>
                            <li>Step 2: Do that</li>
                            <li>Step 3: Do more stuff</li>*@
                    </ol>
                </div>
            </div>
        </div>
        <br />

    </body>
    <br />
    <div text-align:center>
        <h6>Reviews</h6>
        <p>@id</p>
        @*@foreach (var item in recipe.missedIngredients)
            {
                <p>item.name</p>
            }*@
        @*<p>@recipe.missedIngredientCount</p>*@
<textarea></textarea> <br />
        <button @onclick="reviewClick">Post Review</button>
        <br /> <br />
        <input type="button" value="Print/Save Recipe" onClick="window.print()">
    </div>
    <a href="@fblink" target="_blank">
        <img src="https://simplesharebuttons.com/images/somacro/facebook.png" alt="Facebook" />
    </a>
    <a href="@twlink" target="_blank">
        <img src="https://simplesharebuttons.com/images/somacro/twitter.png" alt="Twitter" />
    </a>
    <a href="@rdlink" target="_blank">
        <img src="https://simplesharebuttons.com/images/somacro/reddit.png" alt="Reddit" />
    </a>
    <p>Button Test: @testButtons</p>
}

@code {
    private string fblink, twlink, rdlink, currentUrl;
    //Need these two params to run through the page switch task. See @page statment top of page - RT
    [Parameter]
    public int id { get; set; }  //Recipe ID
    [Parameter]
    public string title { get; set; } //Title of Recipe

    //Cooking Instructions API starter Link - RT
    public string apiRecipeInstructionsLinkStart = "https://api.spoonacular.com/recipes/";
    //Image API Starter Link - RT
    string imageSourceRecipe = "https://spoonacular.com/recipeImages/";

    //Array Object of cooking instructions. "Cooking Instructions" variables can be found in "RecipeModel.cs" - RT
    CookingInstructions[] cookingInstructions;
    //Instance of RecipeModel to store recipe info (Not cooking instructions). See "RecipeModel.cs" for variables - RT
    RecipeModel recipe;// = new RecipeModel();


    RecipeDetails[] recipeDetails;
    public string apiRecipeInformationBulkBaseUrl = "https://api.spoonacular.com/recipes/informationBulk?ids=";
    public string apiKey = "&apiKey=d36cb53813e341069b3c81d6d3b61c31";




    //Async task to gather info before page is rendered. NOTE: If there is no "@if (recipe == null)" at the top, not all the information
    //will be gathered - RT
    protected override async Task OnInitializedAsync()
    {

        //Storing cooking instructions - RT
        //cookingInstructions = await Http.GetFromJsonAsync<CookingInstructions[]>(apiRecipeInstructionsLinkStart +
        //id + "/analyzedInstructions?apiKey=d36cb53813e341069b3c81d6d3b61c31");

        //Storing Recipe information - RT
        //recipe = await Http.GetFromJsonAsync<RecipeModel>(apiRecipeInstructionsLinkStart + this.id +
        //     "/information?includeNutrition=false&metaInformation=true&apiKey=d36cb53813e341069b3c81d6d3b61c31");

        //Correcting image link so it can be pulled from the correct database off API link - RT
        //recipe.image = imageSourceRecipe + id.ToString() + "-" + "480x360." + recipe.imageType.ToString();

        recipeDetails = await Http.GetFromJsonAsync<RecipeDetails[]>(apiRecipeInformationBulkBaseUrl + id + apiKey);
        currentUrl = NavigationManager.Uri;
        fblink = "http://www.facebook.com/sharer.php?u=" + currentUrl;
        twlink = "https://twitter.com/share?url=" + currentUrl;
        rdlink = "http://reddit.com/submit?url=" + currentUrl;
    }



    private string testButtons;

    //print button event -AL
    private void printClick()
    {
        testButtons = "print button pressed";
    }

    //share button event -AL
    private void shareClick()
    {
        testButtons = "share button pressed";
    }

    //save button event -AL
    private void saveClick()
    {
        testButtons = "save button pressed";
    }

    //post review button event -AL
    private void reviewClick()
    {
        testButtons = "review button pressed";
    }
}