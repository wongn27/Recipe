@page "/profile"
@using Recipe.Web.Data
@using Recipe.Web.Data.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Lists
@using System.Security.Claims
@inject HttpClient client
@inject IJSRuntime js
@inject AuthenticationStateProvider authenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager navigationManager



@if (userFridgeIngredientsDataGridList == null)
{
    <p>Cannot find your fridge</p>
}
<AuthorizeView>
    <NotAuthorized>
        <p>Please Login To View Profile</p>
        <a class="btn btn-info" href="/login"><i class="oi oi-account-login"></i> Login</a>
    </NotAuthorized>
    <Authorized>
        @if (currentUser == null)
        {
            <p>NULL</p>
        }
        else
        {
            <font size="7" face="arial" color="purple">
                <i> <strong>Hello, @currentUser.FirstName.ToString()</strong></i>
            </font>
            <br />
            <img src="/android-chrome-512x512.png" width="300" height="300" />

            @if (userRecipePosts != null)
            {
                <font size="5" face="arial" color="purple">
                    <p><strong>Your Created Recipes</strong></p>
                    @for (int i = 0; i < userRecipePosts.Length; i++)
                    {
                        int number = i + 1;
                        <ol>@number . @userRecipePosts[i].Name    </ol>
                    }
                </font>
            }
        }

        <!--Nested list for the user created Recipes - RT-->
        <div class="control-section">
            <SfListView CssClass="nestedlist" DataSource="@userRecipePostDataModel" ShowHeader="true" HeaderTitle="Created Recipes" ShowIcon="true">
                <ListViewFieldSettings TValue="UserRecipePostDataModel" Id="Id" Text="name" Child="Child" Tooltip="Text"></ListViewFieldSettings>
                <ListViewEvents TValue="UserRecipePostDataModel" Clicked="@(e=> seletedNestedList.Add(Tuple.Create(e.Text, e.ItemData.Id)))"></ListViewEvents>
            </SfListView>
        </div>

        <!--Used to run method below if user selects items from the NestedList. All this is is a trigger - RT-->
        @if(seletedNestedList.Count > 0)
        {
            //This can always add the first index of seletedNestedList because seletedNestedList is cleared each time -RT
            selectedRecipeChoiceFullClicks.Add(seletedNestedList[0]);
            ViewRecipeNestedListClick(seletedNestedList);
        }

        <br>
        <br />

        <!--Datagrid for the users saved ingredients - RT-->
        <font size="5" face="arial" color="purple">
            <strong>Your Fridge</strong>
        </font>
        <SfGrid @ref="@grid" DataSource="@userFridgeIngredientsDataGridList" Height="210" Width="450" EnableHover="false"
                AllowSorting="true" EnableVirtualization="true" Toolbar="@toolBarItems">
            <GridEditSettings AllowEditing="true" AllowDeleting="true" Mode="EditMode.Batch" ShowDeleteConfirmDialog="true"></GridEditSettings>
            <GridSelectionSettings Type="SelectionType.Multiple"></GridSelectionSettings>
            <GridEvents OnBatchDelete="BatchDeleteEvent" RowDeselected="GetRowsDropped" RowSelected="GetSelectedRecords" TValue="UserFridgeIngredient"></GridEvents>
            <GridColumns>
                <GridColumn Field="Name"
                            HeaderText="Name"
                            TextAlign="TextAlign.Left"
                            IsPrimaryKey="true"
                            AllowFiltering="true"
                            Width="90"
                            AutoFit="true">
                </GridColumn>
                <GridColumn Field="Quantity"
                            HeaderText="In Fridge"
                            TextAlign="TextAlign.Left"
                            AllowEditing="true"
                            Width="90">
                </GridColumn>
                <GridColumn Field="Unit"
                            HeaderText="Unit"
                            TextAlign="TextAlign.Left"
                            AllowEditing="false"
                            Width="90">
                </GridColumn>
                <GridColumn Field="Quantity"
                            HeaderText="Using"
                            TextAlign="TextAlign.Left"
                            Width="90">
                </GridColumn>
                <GridColumn Field="Id"
                            HeaderText="ID"
                            Visible="false"
                            TextAlign="TextAlign.Left"
                            AllowEditing="false"
                            Width="90">
                </GridColumn>

                <GridColumn Type="ColumnType.CheckBox"
                            Width="50">
                </GridColumn>

            </GridColumns>
            <GridPageSettings PageSizes="true">
            </GridPageSettings>
        </SfGrid>
        <a class="btn btn-success" href="/Search"><i class="oi oi-plus"></i> Seach Ingredient To Add</a>
        <button type="button" class="btn btn-success" @onclick="showRecipes"><i class="oi oi-circle-check"></i> @totalIngsSelected Seach for Recipes</button>

    </Authorized>
</AuthorizeView>

@if(deleteSwitch == true)
{
   var result = DeleteItemsFromFridge();
}
else
{

}



@code {

    //Used to store when the user clicks the NestedList. This stores the strings
    //i.e - first string seleced is the created Recipe (Ex: Chicken soup) and after,
    //"View Recipe". If the newest item added is "View Recipe," a method in triggered
    //to pull the recipe before the "View Recipe" item - RT
    //Using a Tuple so the clicks are stored in pairs. - RT
    List<Tuple<string, string>> seletedNestedList = new List<Tuple<string, string>>();

    //Works with the selectedRecipe list. This list is not
    //cleared after each click. The "selectedRecipe" is.
    //See "ViewRecipeNestedListClick" for more details - RT
    List<Tuple<string, string>> selectedRecipeChoiceFullClicks = new List<Tuple<string, string>>();

    List<string> guidListRecipeChiceFromPost = new List<string>();
    //This calss is needed to bind to the list data of the Created recipes - RT
    class UserRecipePostDataModel
    {
        public string Id { get; set; }
        public string name { get; set; }
        public List<UserRecipePostDataModel> Child { get; set; }
    }

    //Instance of class above - RT
    List<UserRecipePostDataModel> userRecipePostDataModel = new List<UserRecipePostDataModel>();

    //Toolbar for Datagrid - RT
    public string[] toolBarItems = new string[] { "Edit", "Delete", "Update" };

    //Storing number of Ingredients selected for Search button - RT
    public int totalIngsSelected { get; set; } = 0;

    //Instance to bring in Ingredients from Azure DB - RT
    public UserFridgeIngredient[] userFridgeIngredients { get; set; }

    //Instance to display in Grid USING SfGrud (Ingredients in Userfridge) - RT
    public List<UserFridgeIngredient> userFridgeIngredientsDataGridList { get; set; }

    //Email of current logged in user - RT
    public string currentUserEmail { get; set; }

    //User instance of current user logged in - RT
    User currentUser { get; set; }

    //Grid to display ingridents in Sf grid in razor above - RT
    SfGrid<UserFridgeIngredient> grid;

    //A list of the selected Rows (Index) of the Grid - RT
    public List<double> selectedRowIndexes { get; set; }

    //A list of the selected Rows (Index) of the Grid - RT
    public double[] totalValue { get; set; }

    ////A list of the selected Rows (Index) of the Grid - RT
    public string selectedValue;

    //A List that is ONLY the ingredients the user checks off in the data grid - RT
    List<UserFridgeIngredient> IngredientsToSearchByList = new List<UserFridgeIngredient>();

    //Object to get recipes that user uploaded
    UserRecipePost[] userRecipePosts { get; set; }

    bool deleteSwitch = false;


    protected override async Task OnInitializedAsync()
    {

        base.OnInitialized();

        //Getting current user email that is logged in using our AuthenticationState - RT
        var asyncUser = await ((CustomAuthenticationStateProvider)authenticationStateProvider).GetAuthenticationStateAsync();
        var currentUserTemp = asyncUser.User;
        string emailFromCustomAuth = currentUserTemp.Identity.Name;

        //Getting current email of user logged in. This does the same as the code directly above.
        //Keeping both for testing purposes - RT
        //NOTE - Added sessionStorage to the Login.razor page under (LoginUser Button). That line is needed for this to work - RT
        currentUserEmail = await sessionStorage.GetItemAsync<string>("email");

        //Using userController and passing in the email of current user to get all the credentials of the user - RT
        //This is where we also get the GUID of the logged in user - RT
        currentUser = await client.GetFromJsonAsync<User>("api/userController/" + currentUserEmail.ToString());

        //using userFridgeIngController + the GUID of the logged in user to get all the data from the
        //UserFridgeIngredient table in Azure - RT
        userFridgeIngredients = await client.GetFromJsonAsync<UserFridgeIngredient[]>("api/userFridgeIng/" + currentUser.Id);

        //Taking the Ingredients from the UserFridge in the DB and adding them to the datagrid instance.
        //Note the COPY of the Azure DB table is what is displayed to the user, not the DB table directly - RT
        userFridgeIngredientsDataGridList = userFridgeIngredients.ToList();


        //Gets UserRecipePosts if there are any and stores them in an object - RT
        userRecipePosts = await client.GetFromJsonAsync<UserRecipePost[]>("api/userRecipeController/" + currentUser.Id);

        //Used to fill the NestedListView of user created Recipes - RT
        foreach (var post in userRecipePosts)
        {
            userRecipePostDataModel.Add(new UserRecipePostDataModel
            {
                Id = post.Id.ToString(),
                name = post.Name,
                Child = new List<UserRecipePostDataModel>() { new UserRecipePostDataModel { Id = post.Id.ToString(), name = "View Recipe" } }
            });
        }
    }

    public async Task GetRowsDropped(RowDeselectEventArgs<UserFridgeIngredient> args)
    {
        //Gets the Index of the selected rows in the Data grid- RT
        var selectedRows = await grid.GetSelectedRowIndexes();

        //Gets the data inside the row of selected rows in the Data grid - RT
        var selectedData = this.grid.GetSelectedRecords();

        //Waits for the 'selectedData' to be completed executing - RT
        //(From what I understand "GetSelectedRecords" is a Task and for this code below to work, that 'Records' task must be
        //Completed first. This is why we use OnCompleted)
        selectedData.GetAwaiter().OnCompleted(() =>
        {

            totalIngsSelected = 0;
            //Getting data from selected rows and putting them in a new List - RT
            List<UserFridgeIngredient> tempList = selectedData.Result;

            //Probably don't need, will test later - RT
            StateHasChanged();

            //This is to clear the list before the ingredients are added. Failsafe just in case the user
            //removes items - RT
            IngredientsToSearchByList.Clear();


            //Addind the SELECTED ingredients to the list that will be used to serach for Recipes - RT
            foreach (var t in tempList)
            {
                totalIngsSelected++;
                IngredientsToSearchByList.Add(new UserFridgeIngredient
                {
                    Name = t.Name,
                    Id = t.Id,
                    Quantity = t.Quantity,
                    Unit = t.Unit
                });
            }
            //Rerendering to show seleted ingredients each time
            StateHasChanged();
        });

        StateHasChanged();
    }

    public async Task GetSelectedRecords(RowSelectEventArgs<UserFridgeIngredient> args)
    {
        //Gets the Index of the selected rows in the Data grid- RT
        var selectedRows = await grid.GetSelectedRowIndexes();

        //Gets the data inside the row of selected rows in the Data grid - RT
        var selectedData = this.grid.GetSelectedRecords();

        //Waits for the 'selectedData' to be completed executing - RT
        //(From what I understand "GetSelectedRecords" is a Task and for this code below to work, that 'Records' task must be
        //Completed first. This is why we use OnCompleted)
        selectedData.GetAwaiter().OnCompleted(() =>
        {

            totalIngsSelected = 0;
            //Getting data from selected rows and putting them in a new List - RT
            List<UserFridgeIngredient> tempList = selectedData.Result;

            //Probably don't need, will test later - RT
            StateHasChanged();

            //This is to clear the list before the ingredients are added. Failsafe just in case the user
            //removes items - RT
            IngredientsToSearchByList.Clear();

            //Addind the SELECTED ingredients to the list that will be used to serach for Recipes - RT
            foreach (var t in tempList)
            {
                totalIngsSelected++;
                IngredientsToSearchByList.Add(new UserFridgeIngredient
                {
                    Name = t.Name,
                    Id = t.Id,
                    Quantity = t.Quantity,
                    Unit = t.Unit
                });
            }

            //Rerendering to show seleted ingredients each time
            StateHasChanged();
        });

        StateHasChanged();
    }


    List<UserFridgeIngredient> deleteList = new List<UserFridgeIngredient>();

    //Event handler before the item is deleted from the users fridge. This is where the item is removed from DB - RT
    public async Task BatchDeleteEvent(BeforeBatchDeleteArgs<UserFridgeIngredient> args)
    {
        //Gets the Index of the selected rows in the Data grid- RT
        var selectedRows = await grid.GetSelectedRowIndexes();

        //Gets the data inside the row of selected rows in the Data grid - RT
        var selectedData = this.grid.GetSelectedRecords();

        //Waits for the 'selectedData' to be completed executing - RT
        //(From what I understand "GetSelectedRecords" is a Task and for this code below to work, that 'Records' task must be
        //Completed first. This is why we use OnCompleted)
        selectedData.GetAwaiter().OnCompleted(() =>
        {

            totalIngsSelected = 0;
            //Getting data from selected rows and putting them in a new List - RT
            List<UserFridgeIngredient> tempList = selectedData.Result;

            //Probably don't need, will test later - RT
            StateHasChanged();

            //This is to clear the list before the ingredients are added. Failsafe just in case the user
            //removes items - RT
            IngredientsToSearchByList.Clear();

            //Addind the SELECTED ingredients to the list that will be used to serach for Recipes - RT
            foreach (var t in tempList)
            {
                totalIngsSelected++;
                deleteList.Add(new UserFridgeIngredient
                {
                    Name = t.Name,
                    Id = t.Id,
                    Quantity = t.Quantity,
                    Unit = t.Unit
                });
            }

            //Rerendering to show seleted ingredients each time
            StateHasChanged();
        });

        StateHasChanged();
        deleteSwitch = true;
    }


    //Deleting selected Items from User fridge - RT
    public async Task DeleteItemsFromFridge()
    {
        foreach (var i in deleteList)
        {
            var response = await client.DeleteAsync("api/userFridgeIng/" + i.Id);
            var test = response.ReasonPhrase;
        }
        deleteList.Clear();

    }

    //Runs every time an an item is clicked in the nested RecipePost list - RT
    public void ViewRecipeNestedListClick(List<Tuple<string, string>> obj)
    {
        //If the lastest click was the "View Recipe" button - RT
        if(obj[0].Item1 == "View Recipe")
        {
            //Getting the total number of clicks from the list storing all the click info - RT
            int numberOfItems = selectedRecipeChoiceFullClicks.Count;
            //Going back to the twice since the clicks are stored as a pair - RT
            string lastRecipeClicked = selectedRecipeChoiceFullClicks[numberOfItems - 2].Item2;

            navigationManager.NavigateTo("/recipefromprofile");
        }
        else
        {
            //Clearing list so we always have the most recent click in index zero - RT
            seletedNestedList.Clear();
        }

    }

    public async Task showRecipes()
    {
        //Pulling all recipe data in as string first - RT
        string ingredientAllc = "";
        //Counter so we know when not to add a plus sign for search string - RT
        int ingredientNum = 1;

        //Loop to create the correct recipe search string for the API - RT
        foreach (var ingredient in IngredientsToSearchByList)
        {
            ingredientAllc += ingredient.Name;

            if (ingredientNum != IngredientsToSearchByList.Count)
            {
                ingredientAllc += ",+";
            }
            ingredientNum++;
        }

        await sessionStorage.SetItemAsync<string>("ingredientList", ingredientAllc);

        navigationManager.NavigateTo("/recipefromprofile");
    }

}


<style>
    
    .nestedlist {
        max-width: 500px;
        margin: auto;
        border: 1px solid #dddddd;
        border-radius: 3px;
    }
</style>