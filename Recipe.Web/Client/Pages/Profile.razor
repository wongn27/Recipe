@page "/profile"
@using Recipe.Web.Data
@using Recipe.Web.Data.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor

@using System.Security.Claims
@inject HttpClient client
@inject IJSRuntime js
@inject AuthenticationStateProvider authenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager navigationManager


<br />
<label>About Me</label>
<br />
<p id="Description">@desc</p>
<br />

<label>Email</label>
<br />
@*<label>Username</label> <button @onclick="changeUserClick">Change Username</button><br />
    <label>Password</label> <button @onclick="changePassClick">Change Password</button><br />*@

<input type="submit" class="form-control col-2 btn btn-primary" @onclick="changeUserClick" value="Change Username" />
<input type="submit" class="form-control col-2 btn btn-primary" @onclick="changePassClick" value="Change Password" />
<br />


@if (userFridgeIngredientsDataGridList == null)
{
    <p>Cannot find your fridge</p>
}
<AuthorizeView>
    <NotAuthorized>
        <p>Please Login To View Profile</p>
        <a class="btn btn-info" href="/login"><i class="oi oi-account-login"></i> Login</a>
    </NotAuthorized>
    <Authorized>
        @if (currentUser == null)
        {
            <p>NULL</p>
        }
        else
        {
            <font size="7" face="arial" color="purple">
                <i> <strong>Hello, @currentUser.FirstName.ToString()</strong></i>
            </font>
            <br />
            <img src="/android-chrome-512x512.png" width="300" height="300" />
        }
        <br>
        <br />
        <font size="5" face="arial" color="purple">
            <strong>Your Fridge</strong>
        </font>
        <SfGrid @ref="@grid" DataSource="@userFridgeIngredientsDataGridList" Height="210" Width="450" EnableHover="false"
                AllowSorting="true" EnableVirtualization="true" Toolbar="@toolBarItems">
            <GridEditSettings AllowEditing="true" AllowDeleting="true" Mode="EditMode.Batch" ShowDeleteConfirmDialog="true"></GridEditSettings>
            <GridSelectionSettings Type="SelectionType.Multiple"></GridSelectionSettings>
            <GridEvents OnBatchDelete="BatchDeleteEvent" RowDeselected="GetRowsDropped" RowSelected="GetSelectedRecords" TValue="UserFridgeIngredient"></GridEvents>
            <GridColumns>
                <GridColumn Field="Name"
                            HeaderText="Name"
                            TextAlign="TextAlign.Left"
                            IsPrimaryKey="true"
                            AllowFiltering="true"
                            Width="90"
                            AutoFit="true">
                </GridColumn>
                <GridColumn Field="Quantity"
                            HeaderText="In Fridge"
                            TextAlign="TextAlign.Left"
                            AllowEditing="true"
                            Width="90">
                </GridColumn>
                <GridColumn Field="Unit"
                            HeaderText="Unit"
                            TextAlign="TextAlign.Left"
                            AllowEditing="false"
                            Width="90">
                </GridColumn>
                <GridColumn Field="Quantity"
                            HeaderText="Using"
                            TextAlign="TextAlign.Left"
                            Width="90">
                </GridColumn>
                <GridColumn Field="Id"
                            HeaderText="ID"
                            Visible="false"
                            TextAlign="TextAlign.Left"
                            AllowEditing="false"
                            Width="90">
                </GridColumn>

                <GridColumn Type="ColumnType.CheckBox"
                            Width="50">
                </GridColumn>

            </GridColumns>
            <GridPageSettings PageSizes="true">
            </GridPageSettings>
        </SfGrid>
        <a class="btn btn-success" href="/Search"><i class="oi oi-plus"></i> Seach Ingredient To Add</a>
        <button type="button" class="btn btn-success" @onclick="showRecipes"><i class="oi oi-circle-check"></i> @totalIngsSelected Seach for Recipes</button>

    </Authorized>
</AuthorizeView>


<input type="submit" class="form-control col-2 btn btn-primary" @onclick="editProfileClick" value="Edit Profile" />

<p>@buttonCheck</p>

@code {

        //Toolbar for Datagrid - RT
    public string[] toolBarItems = new string[] { "Edit", "Delete", "Update" };

    //Storing number of Ingredients selected for Search button - RT
    public int totalIngsSelected { get; set; } = 0;

    //Instance to bring in Ingredients from Azure DB - RT
    public UserFridgeIngredient[] userFridgeIngredients { get; set; }

    //Instance to display in Grid USING SfGrud (Ingredients in Userfridge) - RT
    public List<UserFridgeIngredient> userFridgeIngredientsDataGridList { get; set; }

    //Email of current logged in user - RT
    public string currentUserEmail { get; set; }

    //User instance of current user logged in - RT
    User currentUser { get; set; }

    //Grid to display ingridents in Sf grid in razor above - RT
    SfGrid<UserFridgeIngredient> grid;

    //A list of the selected Rows (Index) of the Grid - RT
    public List<double> selectedRowIndexes { get; set; }

    //A list of the selected Rows (Index) of the Grid - RT
    public double[] totalValue { get; set; }

    ////A list of the selected Rows (Index) of the Grid - RT
    public string selectedValue;

    //A List that is ONLY the ingredients the user checks off in the data grid - RT
    List<UserFridgeIngredient> IngredientsToSearchByList = new List<UserFridgeIngredient>();


    protected override async Task OnInitializedAsync()
    {
        //Getting current user email that is logged in using our AuthenticationState - RT
        var asyncUser = await ((CustomAuthenticationStateProvider)authenticationStateProvider).GetAuthenticationStateAsync();
        var currentUserTemp = asyncUser.User;
        string emailFromCustomAuth = currentUserTemp.Identity.Name;

        //Getting current email of user logged in. This does the same as the code directly above.
        //Keeping both for testing purposes - RT
        //NOTE - Added sessionStorage to the Login.razor page under (LoginUser Button). That line is needed for this to work - RT
        currentUserEmail = await sessionStorage.GetItemAsync<string>("email");

        //Using userController and passing in the email of current user to get all the credentials of the user - RT
        //This is where we also get the GUID of the logged in user - RT
        currentUser = await client.GetFromJsonAsync<User>("api/userController/" + currentUserEmail.ToString());

        //using userFridgeIngController + the GUID of the logged in user to get all the data from the
        //UserFridgeIngredient table in Azure - RT
        userFridgeIngredients = await client.GetFromJsonAsync<UserFridgeIngredient[]>("api/userFridgeIng/" + currentUser.Id);

        //Taking the Ingredients from the UserFridge in the DB and adding them to the datagrid instance.
        //Note the COPY of the Azure DB table is what is displayed to the user, not the DB table directly - RT
        userFridgeIngredientsDataGridList = userFridgeIngredients.ToList();
    }

    public async Task GetRowsDropped(RowDeselectEventArgs<UserFridgeIngredient> args)
    {
        //Gets the Index of the selected rows in the Data grid- RT
        var selectedRows = await grid.GetSelectedRowIndexes();

        //Gets the data inside the row of selected rows in the Data grid - RT
        var selectedData = this.grid.GetSelectedRecords();

        //Waits for the 'selectedData' to be completed executing - RT
        //(From what I understand "GetSelectedRecords" is a Task and for this code below to work, that 'Records' task must be
        //Completed first. This is why we use OnCompleted)
        selectedData.GetAwaiter().OnCompleted(() =>
        {


            Name = "Taco",
            InTheFridgeIngredientId = 3424,
            Quantity = 3,
            Unit = "Unit"

            totalIngsSelected = 0;
            //Getting data from selected rows and putting them in a new List - RT
            List<UserFridgeIngredient> tempList = selectedData.Result;

            //Probably don't need, will test later - RT
            StateHasChanged();

            //This is to clear the list before the ingredients are added. Failsafe just in case the user
            //removes items - RT
            IngredientsToSearchByList.Clear();


            //Addind the SELECTED ingredients to the list that will be used to serach for Recipes - RT
            foreach (var t in tempList)
            {
                totalIngsSelected++;
                IngredientsToSearchByList.Add(new UserFridgeIngredient
                {
                    Name = t.Name,
                    Id = t.Id,
                    Quantity = t.Quantity,
                    Unit = t.Unit
                });
            }
            //Rerendering to show seleted ingredients each time
            StateHasChanged();
        });

        StateHasChanged();
    }

    public async Task GetSelectedRecords(RowSelectEventArgs<UserFridgeIngredient> args)
    {
        //Gets the Index of the selected rows in the Data grid- RT
        var selectedRows = await grid.GetSelectedRowIndexes();

        //Gets the data inside the row of selected rows in the Data grid - RT
        var selectedData = this.grid.GetSelectedRecords();

        //Waits for the 'selectedData' to be completed executing - RT
        //(From what I understand "GetSelectedRecords" is a Task and for this code below to work, that 'Records' task must be
        //Completed first. This is why we use OnCompleted)
        selectedData.GetAwaiter().OnCompleted(() =>
        {

            totalIngsSelected = 0;
            //Getting data from selected rows and putting them in a new List - RT
            List<UserFridgeIngredient> tempList = selectedData.Result;

            //Probably don't need, will test later - RT
            StateHasChanged();

            //This is to clear the list before the ingredients are added. Failsafe just in case the user
            //removes items - RT
            IngredientsToSearchByList.Clear();

            //Addind the SELECTED ingredients to the list that will be used to serach for Recipes - RT
            foreach (var t in tempList)
            {
                totalIngsSelected++;
                IngredientsToSearchByList.Add(new UserFridgeIngredient
                {
                    Name = t.Name,
                    Id = t.Id,
                    Quantity = t.Quantity,
                    Unit = t.Unit
                });
            }

            //Rerendering to show seleted ingredients each time
            StateHasChanged();
        });

        StateHasChanged();
    }

    List<UserFridgeIngredient> testList = new List<UserFridgeIngredient>();

    //Event handler before the item is deleted from the users fridge. This is where the item is removed from DB - RT
    public async Task BatchDeleteEvent(BeforeBatchDeleteArgs<UserFridgeIngredient> args)
    {
        //Gets the Index of the selected rows in the Data grid- RT
        var selectedRows = await grid.GetSelectedRowIndexes();

        //Gets the data inside the row of selected rows in the Data grid - RT
        var selectedData = this.grid.GetSelectedRecords();

        //Waits for the 'selectedData' to be completed executing - RT
        selectedData.GetAwaiter().OnCompleted(() =>
        {
            //Getting data from selected rows and putting them in a new List to be deleted - RT
            List<UserFridgeIngredient> deleteIngredientsList = selectedData.Result;
            foreach(var i in deleteIngredientsList)
            {
                testList.Add(i);
            }

        });

        await Delete();
        StateHasChanged();
    }

    public async Task Delete()
    {
        foreach (var i in testList)
        {
            var response = await client.DeleteAsync("api/userFridgeIng/" + i.Id.ToString());
        }
        testList.Clear();

    }


    public async Task showRecipes()
    {
        //Pulling all recipe data in as string first - RT
        string ingredientAllc = "";
        //Counter so we know when not to add a plus sign for search string - RT
        int ingredientNum = 1;

        //Loop to create the correct recipe search string for the API - RT
        foreach (var ingredient in IngredientsToSearchByList)
        {
            ingredientAllc += ingredient.Name;

            if (ingredientNum != IngredientsToSearchByList.Count)
            {
                ingredientAllc += ",+";
            }
            ingredientNum++;
        }

        await sessionStorage.SetItemAsync<string>("ingredientList", ingredientAllc);

        navigationManager.NavigateTo("/recipefromprofile");
    }

}
