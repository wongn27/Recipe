@page "/"
@using Recipe.Web.Data.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Recipe.Web.Data.Utilities
@using System.Text.Json 
@inject NavigationManager navigationManager
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JS


<font size="8" face="arial" color="purple">
<i> <strong>In The Fridge</strong></i>
            </font>


<AuthorizeView>
    <Authorized>
        @if (FirstName == null)
        {
            <p>Welcome, user.</p>
        }
        else
        {
            <p>Welcome, @(FirstName)! See your <a href="/profile">profile</a>. </p>
        }

    </Authorized>
    <NotAuthorized>
        <p>Please <a href="/login">login</a> or register an account</p>
    </NotAuthorized>
</AuthorizeView>

@if (recipeTest == null)
{
    <hr />
    <div class="input-group mb-3">
        <input class="input-group-text text-info border-info" type="text" @bind="searchText" placeholder="Enter a recipe..." />
        <div class="input-group-prepend">
            <button title="Search for a recipe" class="btn btn-outline-info" style="margin-left:25px;" type="button" @onclick="Search">Search for Recipe</button>
        </div>
    </div>

    <div>
        <button title="Find a random recipe" class="btn btn-outline-warning" type="button" @onclick="randomRecipeButton">Find Random Recipe</button>
    </div>
    <br />


    <!--Filters-->
    <!-- These filters are not avaialble as parameters for the endpoint, but available only in the response. -->

    <!--
    <input title="Recipes built with sustainable ingredients?" type="checkbox" id="Sustainable" name="Sustainable" value="Sustainable" @onchange="@SustainableCheckboxOnChange">
    <label for="Sustainable"> Sustainable</label>
    <br />

    <input type="checkbox" id="Popular" name="Popular" value="Popular" @onchange="@PopularCheckboxOnChange">
    <label for="Popular"> Popular</label>
    <br />

    <input type="checkbox" id="Cheap" name="Cheap" value="Cheap" @onchange="@CheapCheckboxOnChange">
    <label for="Cheap"> Cheap</label>
    <br />

    <input type="checkbox" id="Healthy" name="Healthy" value="Healthy" @onchange="@HealthyCheckboxOnChange">
    <label for="Healthy"> Healthy</label>
    <br />
    -->
    <br />
    <div>
        <!--Intolerences -->
        <label class="col-form-label-lg text-success">
            Filters
        </label>

        <br />

        <input class="form-check-input" type="checkbox" id="Dairy Free" name="Dairy Free" value="Dairy Free" title="Recipes that contain dairy free ingredients." @onchange="@DairyFreeCheckboxOnChange">
        <label for="Dairy Free"> Dairy Free</label>

        <br />

        <input class="form-check-input" type="checkbox" id="Gluten Free" name="Gluten Free" value="Gluten Free" title="Recipes that contain gluten free ingredients." @onchange="@GlutenFreeCheckboxOnChange">
        <label for="Gluten Free"> Gluten Free</label>

        <br />

        <input class="form-check-input" type="checkbox" id="Vegetarian" name="Vegetarian" value="Vegetarian" title="Recipes that are vegetarian friendly." @onchange="@VegetarianCheckboxOnChange">
        <label for="Vegetarian"> Vegetarian</label>
    </div>
    <br />

}
else
{
    if (recipeSearchButtonPressed == true)
    {
        <div class="card-deck">
            @foreach (var recipe in recipeTest.results)
            {
                <div class="card m-3" style="min-width: 18rem; max-width:30.5%;">
                    <div class="card-header">
                        <h3>@recipe.title</h3>
                    </div>
                    <img class="card-img-top" src="@recipe.image" />

                    <div class="card-footer text-center">
                        <a href="/recipepage/@recipe.id/@recipe.title" class="btn btn-primary m-1">View Recipe</a>
                    </div>
                </div>
            }
        </div>
    }

    if (foundTrigger == true)
    {
        @if (matchingUserRecipeResults.Count > 0)
        {
            <font size="5" face="arial" color="purple">
                <i> <strong>User Created Recipes: </strong></i>

            </font>
            <div class="card-deck">
                @foreach (var recipe in matchingUserRecipeResults)
                {
                    <div class="card m-3" style="min-width: 18rem; max-width:30.5%;">
                        <div class="card-header">
                            <h3>@recipe.Name</h3>
                        </div>
                        <img class="card-img-top" src="/android-chrome-512x512.png" width="300" height="300" />

                        <div class="card-footer text-center">
                            <a href="/recipepage" class="btn btn-primary m-1">View Recipe</a>
                        </div>
                    </div>
                }
            </div>
        }
    }
}
@if (funFact == null)
{

}
else
{
    <br />
    <h2>Did you know: @funFact.text</h2>
}

@code {
    private int numberOfApiResults = 10;
    //Field entered in textbox - RT
    public string searchText { get; set; }
    public IEnumerable<InTheFridgeRecipe> recipes;
    //Object that STORES the recipes from the search by user - RT
    RootobjectRecipe recipeTest;
    //Stores the random recipe - RT
    RootobjectRandom randomRecipe;
    //Starter for the recipe search
    private string ApiStarter = "https://api.spoonacular.com/recipes/complexSearch?query=";
    //Our API Key - RT
    private string ApiKey = "&apiKey=d36cb53813e341069b3c81d6d3b61c31";
    //Trigger for recipe search button to display results - RT
    private bool recipeSearchButtonPressed = false;
    //Object for the fun fact - RT
    FunFact funFact;
    public System.Security.Principal.IPrincipal User { get; set; }
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    //User instance of current user logged in - RT
    User currentUser { get; set; }
    //Email of current logged in user - RT
    public string currentUserEmail { get; set; }
    public string FirstName { get; set; }

    //Collection of user recipes gained after user searches - RT
    UserRecipePost[] resultsFromUserRecipe { get; set; }
    bool foundTrigger = false;

    //Collection of user-created recipes that match the search by the user -RT
    List<UserRecipePost> matchingUserRecipeResults = new List<UserRecipePost>();



    protected override async Task OnInitializedAsync()
    {
        //Getting fun fact on the homepage -RT
        funFact = await Http.GetFromJsonAsync<FunFact>
            ("https://api.spoonacular.com/food/trivia/random?apiKey=d36cb53813e341069b3c81d6d3b61c31");

        //Getting current email of user logged in. This does the same as the code directly above.
        //Keeping both for testing purposes - RT
        //NOTE - Added sessionStorage to the Login.razor page under (LoginUser Button). That line is needed for this to work - RT
        currentUserEmail = await sessionStorage.GetItemAsync<string>("email");

        //Using userController and passing in the email of current user to get all the credentials of the user - RT
        //This is where we also get the GUID of the logged in user - RT
        //Also where we get the First Name for the top of the page - RT
        //Had to put this in a try-catch since it is the starting point of the app. SessionStorage wont
        //have a reference until the user logs in- RT
        try
        {
            currentUser = await Http.GetFromJsonAsync<User>("api/userController/" + currentUserEmail.ToString());
            FirstName = currentUser.FirstName;
        }
        catch
        {
        }

    }

    RecipeResults[] recipeResults;
    public string apiRecipeComplexSearchBaseUrl = "https://api.spoonacular.com/recipes/complexSearch";
    public string apiAddRecipeInfoParam = "?addRecipeInformation=true";
    public string returnSingleResult = "&number=20";
    public string apiKey = "&apiKey=d36cb53813e341069b3c81d6d3b61c31";

    //Taking the string entered by the user and searching for recipes based on it -RT
    private async Task Search()
    {
        if (string.IsNullOrEmpty(searchText))
        {
            await JS.InvokeAsync<object>("alert", "Search query is not valid. Please enter a search string.");
            return;
        }

        if (searchText != null)
        {
            var searchModel = new SpoonacularRecipeSearchModel()
            {
                SearchString = searchText,
                NumberOfResults = numberOfApiResults
            };

            searchModel.IsDairyFree = IsDairyFree;
            searchModel.IsGlutenFree = IsGlutenFree;
            searchModel.IsVegetarian = IsVegetarian;

            var response = await Http.PostAsJsonAsync<SpoonacularRecipeSearchModel>("/recipe", searchModel);

            var json = await response.Content.ReadAsStringAsync();
            recipes = JsonSerializer.Deserialize<InTheFridgeRecipe[]>(json);
            recipeSearchButtonPressed = true;

            //Getting all user created recipes - RT
            resultsFromUserRecipe = await Http.GetFromJsonAsync<UserRecipePost[]>("api/userRecipeController");

            //Running method to find matching recipes from user search - RT
            findMatchingRecipes();
        }
    }

    //Searching DB for recipes matching user search - RT
    public void findMatchingRecipes()
    {
        foreach (var i in resultsFromUserRecipe)
        {
            string dbUpperName = i.Name.ToUpper();

            if (dbUpperName.Contains(searchedItem.ToUpper()))
            {
                matchingUserRecipeResults.Add(i);

            }
        }
        foundTrigger = true;

    }

    private bool IsPopular { get; set; } = false;

    private void PopularCheckboxOnChange(ChangeEventArgs args)
    {
        IsPopular = bool.Parse(args.Value.ToString());
    }

    private bool IsSustainable { get; set; } = false;

    private void SustainableCheckboxOnChange(ChangeEventArgs args)
    {
        IsSustainable = bool.Parse(args.Value.ToString());
    }

    private bool IsCheap { get; set; } = false;

    private void CheapCheckboxOnChange(ChangeEventArgs args)
    {
        IsCheap = bool.Parse(args.Value.ToString());
    }

    private bool IsHealthy { get; set; } = false;

    private void HealthyCheckboxOnChange(ChangeEventArgs args)
    {
        IsHealthy = bool.Parse(args.Value.ToString());
    }

    private bool IsDairyFree { get; set; } = false;

    private void DairyFreeCheckboxOnChange(ChangeEventArgs args)
    {
        IsDairyFree = bool.Parse(args.Value.ToString());
    }

    private bool IsGlutenFree { get; set; } = false;

    private void GlutenFreeCheckboxOnChange(ChangeEventArgs args)
    {
        IsGlutenFree = bool.Parse(args.Value.ToString());
    }

    private bool IsVegetarian { get; set; } = false;

    private void VegetarianCheckboxOnChange(ChangeEventArgs args)
    {
        IsVegetarian = bool.Parse(args.Value.ToString());
    }

    //Gets the random recipe and transfers it to the RecipePage - RT
    private async Task randomRecipeButton()
    {
        randomRecipe = await Http.GetFromJsonAsync<RootobjectRandom>
            ("https://api.spoonacular.com/recipes/random?number=1" + ApiKey);

        int recipeID = randomRecipe.recipes[0].id;
        string recipeTitle = randomRecipe.recipes[0].title;
        navigationManager.NavigateTo("/recipepage/" + recipeID.ToString() + "/" + recipeTitle);

    }
}