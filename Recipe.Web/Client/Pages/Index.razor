@page "/"
@using Recipe.Web.Data.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager navigationManager
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


<h1>In The Fridge</h1>

<AuthorizeView>
    <Authorized>
        @if (FirstName == null)
        {

        }
        else
        {
        <p>Welcome, @FirstName</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>Please login or register an account!</p>
    </NotAuthorized>
</AuthorizeView>

@if (recipeTest == null)
{
    <br />
    <br />
    <input type="text"
           @bind="searchedItem" />
    <button type="button" @onclick="searchClick">Enter</button>
    <br />
    <br />
    <button type="button" @onclick="randomRecipeButton">Find Random Recipe</button>
    <br />



    <input type="checkbox" id="Sustainable" name="Sustainable" value="Sustainable">
    <label for="Sustainable"> Sustainable</label>
    <br />

    <input type="checkbox" id="Popular" name="Popular" value="Popular">
    <label for="Popular"> Popular</label>
    <br />

    <input type="checkbox" id="Cheap" name="Cheap" value="Cheap">
    <label for="Cheap"> Cheap</label>
    <br />

    <input type="checkbox" id="Healthy" name="Healthy" value="Healthy">
    <label for="Healthy"> Healthy</label>
    <br />

    <input type="checkbox" id="Dairy Free" name="Dairy Free" value="Dairy Free">
    <label for="Dairy Free"> Dairy Free</label>
    <br />

    <input type="checkbox" id="Gluten Free" name="Gluten Free" value="Gluten Free">
    <label for="Gluten Free"> Gluten Free</label>

    <br />
    @*<input type="checkbox" id="Vegan" name="Vegan" value="Vegan">
        <label for="Vegan"> Vegan</label>
        <br />*@

    <input type="checkbox" id="Vegetarian" name="Vegetarian" value="Vegetarian">
    <label for="Vegetarian"> Vegetarian</label>
    <br />

    // @if (isSelected)
    //{
    @*<input type="checkbox" id="Vegan" name="Vegan" value="Vegan" @onchange="LoadVeganRecipes" bind="@isSelected" checked @onclick="LoadVeganRecipes"/>
        <label for="Vegan"> Vegan</label>*@
    //}
    @*else
        {
            <input type="checkbox" id="Vegan" name="Vegan" value="Vegan" @onchange="@(async (e) => await ToggleSelectedAsync(false))" />
            <label for="Vegan"> Vegan</label>
        }*@
    <br />
    <input type="checkbox" class="form-check-input" @onchange="CheckChanged" />
    <label for="Test"> Test</label>
    <p>@checkChanged</p>

}
else
{
    if (recipeSearchButtonPressed == true)
    {
        <div class="card-deck">
            @foreach (var recipe in recipeTest.results)
            {
                <div class="card m-3" style="min-width: 18rem; max-width:30.5%;">
                    <div class="card-header">
                        <h3>@recipe.title</h3>
                    </div>
                    <img class="card-img-top" src="@recipe.image" />

                    <div class="card-footer text-center">
                        <a href="#" class="btn btn-primary m-1">Quick Description</a>
                        <a href="/recipepage/@recipe.id/@recipe.title" class="btn btn-primary m-1">View Recipe</a>

                        <!-- @if (displaySummarizationButtonPressed == true) -->
                        <!--//  { -->
                        <!--       <p> @summarizeRecipe.summary.ToString()</p> -->
                        <!--//   }-->

                    </div>
                </div>
            }
        </div>
    }
}
@if (funFact == null)
{

}
else
{
    <br />
    <h2>Did you know: @funFact.text</h2>
}

@code {

    //Field entered in textbox - RT
    public string searchedItem { get; set; }
    //Object that STORES the recipes from the search by user - RT
    RootobjectRecipe recipeTest;
    //Stores the random recipe - RT
    RootobjectRandom randomRecipe;
    //Starter for the recipe search
    private string ApiStarter = "https://api.spoonacular.com/recipes/complexSearch?query=";
    //Our API Key - RT
    private string ApiKey = "&apiKey=d36cb53813e341069b3c81d6d3b61c31";
    //Trigger for recipe search button to display results - RT
    private bool recipeSearchButtonPressed = false;
    //Object for the fun fact - RT
    FunFact funFact;
    public System.Security.Principal.IPrincipal User { get; set; }
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    //User instance of current user logged in - RT
    User currentUser { get; set; }
    //Email of current logged in user - RT
    public string currentUserEmail { get; set; }
    public string FirstName { get; set; }



    protected override async Task OnInitializedAsync()
    {
        //Getting fun fact on the homepage -RT
        funFact = await Http.GetFromJsonAsync<FunFact>
            ("https://api.spoonacular.com/food/trivia/random?apiKey=d36cb53813e341069b3c81d6d3b61c31");

        //Getting current email of user logged in. This does the same as the code directly above.
        //Keeping both for testing purposes - RT
        //NOTE - Added sessionStorage to the Login.razor page under (LoginUser Button). That line is needed for this to work - RT
        currentUserEmail = await sessionStorage.GetItemAsync<string>("email");

        //Using userController and passing in the email of current user to get all the credentials of the user - RT
        //This is where we also get the GUID of the logged in user - RT
        //Also where we get the First Name for the top of the page - RT
        //Had to put this in a try-catch since it is the starting point of the app. SessionStorage wont
        //have a reference until the user logs in- RT
        try
        {
            currentUser = await Http.GetFromJsonAsync<User>("api/userController/" + currentUserEmail.ToString());
            FirstName = currentUser.FirstName;
        }
        catch
        {
        }



    }

    RecipeResults[] recipeResults;
    public string apiRecipeComplexSearchBaseUrl = "https://api.spoonacular.com/recipes/complexSearch";
    public string apiAddRecipeInfoParam = "?addRecipeInformation=true";
    public string returnSingleResult = "&number=1";
    public string apiKey = "&apiKey=d36cb53813e341069b3c81d6d3b61c31";

    //public bool isSelected = true;

    private string checkChanged = "I am not checked";
    [Parameter]
    public bool isChecked { get; set; } = true;

    private void CheckChanged()
    //private List<RecipeResults> CheckChanged()
    {
        //List<RecipeResults> veganRecipes = new List<RecipeResults>();

        if (!isChecked)
        {
            checkChanged = "Unchecked now!!";
            isChecked = !isChecked;
        }
        else
        {
            checkChanged = "You have checked me now!!";
            isChecked = !isChecked;

            //veganRecipes = recipeResults.Where(x => x.vegan == true).ToList();

        }

        //return veganRecipes;
    }


    //protected override async Task OnInitializedAsync()
    //  {
    //      recipeResults = await Http.GetFromJsonAsync<RecipeResults[]>(apiRecipeComplexSearchBaseUrl + apiAddRecipeInfoParam + returnSingleResult + apiKey);
    //  }

    //private List<RecipeResults> LoadVeganRecipes(ChangeEventArgs e)
    ////protected List<RecipeResults> LoadVeganRecipes()
    //{
    //    //if (isSelected)
    //    //{
    //    //var veganRecipes = recipeResults.Where<RecipeResults>(Func<RecipeResults, bool> )
    //    //IEnumerable<RecipeResults> veganRecipes = from recipe in recipeResults
    //    //                                          where recipe.vegan is true
    //    //                                          select recipe;

    //    List<RecipeResults> veganRecipes = recipeResults.Where(x => x.vegan).ToList();
    //    return veganRecipes;
    //    //}
    //}


    //List<Guid> list = new List<Guid>();
    //User[] user { get; set; }

    //protected override async Task OnInitializedAsync()
    //{
    //    user = await Http.GetFromJsonAsync<User[]>("api/ingredientController");

    //    var numbers2 = from u in ingredients
    //                   where u.Name == "Taco"
    //                   select u.Id;

    //    list = numbers2.ToList();

    //}

    //Taking the string entered by the user and searching for recipes based on it -RT
    private async Task searchClick()
    {

        if (searchedItem != null)
        {
            recipeTest = await Http.GetFromJsonAsync<RootobjectRecipe>
            (ApiStarter + searchedItem.ToString() + "&number=10" + ApiKey);
            recipeSearchButtonPressed = true;

        }
    }

    //Gets the random recipe and transfers it to the RecipePage - RT
    private async Task randomRecipeButton()
    {
        randomRecipe = await Http.GetFromJsonAsync<RootobjectRandom>
            ("https://api.spoonacular.com/recipes/random?number=1" + ApiKey);

        int recipeID = randomRecipe.recipes[0].id;
        string recipeTitle = randomRecipe.recipes[0].title;
        navigationManager.NavigateTo("/recipepage/" + recipeID.ToString() + "/" + recipeTitle);

    }
}

